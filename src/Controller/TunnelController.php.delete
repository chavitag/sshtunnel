<?php

namespace App\Controller;

use App\Exceptions\FacadeException;
use App\Entity\Tunnel;
use App\Entity\UserTunnels;
use App\Entity\Computer;
use App\Entity\Service;
use App\Utils\JSON;
use App\Utils\ATTRS;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;

class TunnelController extends FacadeController {

	public function __construct() {
		$this->setApikey("api-key-tunnel");
		$this->addFacade("default","getAllTunnels");
		$this->addFacade("gettunnels","getAllTunnels");
		$this->addFacade("getcomputers","getComputers");
		$this->addFacade("list","listAction");
		$this->addFacade("save","saveTunnel");
		$this->addFacade("delete","delTunnel");
	}

	/**
	* @Route("/", name="tunnel")
	*/
	public function index(Request $request) {
		$user=$this->getUser();
		return $this->render('index.html.twig',
			array(
				"user"=>$user,
				"services"=>$this->getServices($user),
				"tunnels"=>$this->getTunnels(),
				"computers"=>$this->getComputers(),
			)
		);
	}

	/** 
	 * @Route("/portlist", name="portlist")
	 */
	public function listPorts() {
		$user=$this->getUser();
		$portlist=$this->getServices($user);
		/*$data=array();
		foreach($portlist as $port) {
			$data[]=array("id"=>$port->getId(), "port"=>$port->getPort(), "name"=>$port->getName());
		}*/
		return $this->json($portlist);
	}

	/**
	*	@Route("/list",name="list_tunnels")
	*/
	public function listAction() {
		$data=$this->getTunnels();
		return $this->json($data);
	}

	/**
	*	@Route("/computers",name="list_computers")
	*/
	public function listComputersAction() {
		$data=$this->getComputers();
		return $this->json($data);
	}

	/**
					Service Functions
	*/
	public function getAllTunnels(Request $request=null) {
		$data=array("ok"=>true,"data"=>null);
		$data["data"]=$this->getDoctrine()->getRepository(Tunnel::class)->findAll();
		return JSON::makeResponse(JSON::encode($data,array("users")));
	}

	public function saveTunnel(Request $request) {
		$tunnel=$this->makeTunnel($request);
		if ($tunnel==null) throw new \Exception("El túnel ya existe");
		try {
			$entityManager = $this->getDoctrine()->getManager();
// activate logger
/*$entityManager->getConnection()
    ->getConfiguration()
    ->setSQLLogger(new \Doctrine\DBAL\Logging\EchoSQLLogger()); */

			$entityManager->persist($tunnel);
			$entityManager->flush();

		} catch (\Exception $e) {
			error_log("EXCEPTION ..... ".get_class($e));
			throw new \Exception($e->getMessage());
		}
//		error_log(JSON::encode($tunnel,array("users")));
		return $this->listAction();
	}

	public function delTunnel(Request $request) {
		try {
			$user=$this->getUser();
			$usertunnels=$user->getTunnels();
			$list=json_decode($request->request->get("params"));
			$entityManager = $this->getDoctrine()->getManager();
			foreach($usertunnels as $u_tunnel) {
				$t=$u_tunnel->getTunnel();
				$id=$t->getId();
				if (in_array($id,$list)) {
					$user->removeTunnel($u_tunnel);
					$t->removeUser($u_tunnel);
					$l=$t->getUsers();
					if (count($l) > 0)	$entityManager->persist($t);
					else 						$entityManager->remove($t);
					$entityManager->remove($u_tunnel);
				}
				$entityManager->persist($user);
			}
			$entityManager->flush();
			return $this->listAction();
		} catch(\Exception $e) {
			error_log("EXCEPTION ..... ".get_class($e));
			throw new \Exception($e->getMessage());
		}
	}

	/**
			Auxiliar Functions
	*/

	public function getTunnels() {
		$user=$this->getUser();
		$tunnels=$user->getTunnels();
		$data=array("total"=>count($tunnels),"rows"=>array());
		foreach($tunnels as $tr) {
			$t=$tr->getTunnel();
			$c=$tr->getComputer();
			$s=$tr->getService();
			$data["rows"][]=array(	"id"=>$t->getId(),
											"description"=>$tr->getDescription(),
											"destination"=>$c->getDomainname()." [".$c->getIp()."]",
											"dport"=>$s->getName()." [".$s->getPort()."]",
											"url"=>$user->getUsername().$t->getUrl(),
											"status"=>$tr->getRunning());
		}
		return $data;
	}

	public function getServices($user=null) {
		if ($user!=null)	$portlist=$user->getRol()->getServices();
		else 					$portlist=$this->getDoctrine()->getRepository(Service::class)->findAll();
		$data=array("total"=>count($portlist),"rows"=>array());
		foreach($portlist as $port) {
/*			$row=array("id"=>$port->getId(), "port"=>$port->getPort(), "name"=>$port->getName(),"roles"=>array());
			$roles=$port->getRoles();
			foreach($roles as $r) {
				$row["roles"][]=array("id"=>$r->getId(),"name"=>$r->getName(),"rol"=>$r->getRol());
			}
			$data["rows"][$port->getId()]=$row;
*/
			$row=array("id"=>$port->getId(), "port"=>$port->getPort(), "name"=>$port->getName());
			$data["rows"][]=$row;
		}
		return $data;
	}

	public function getComputers($user=null) {
		$user=$this->getUser();
		if ($user==null)	throw new \Exception("Sesión no iniciada");
		$computers=$user->getRol()->getComputers();
		$data=array("total"=>count($computers),"rows"=>array());
		foreach($computers as $c) {
			$row=array("id"=>$c->getId(),"domain"=>$c->getDomainname(),"ip"=>$c->getIp(),"description"=>$c->getDescription(),"mac"=>$c->getMac());
			//$data["rows"][$c->getId()]=$row;
			$data["rows"][]=$row;
		}
		return $data;
	}


	public function makeTunnel(Request $request) {
		$user=$this->getUser();
		$params=json_decode($request->request->get("params"),true);
		$entityManager = $this->getDoctrine()->getManager();
	
		if (!isset($params["description"]) || ($params["description"]==null)) throw new \Exception("La descripción no puede ser nula");

		$tries=0;
		$portnumber=rand(64000,65534);
		$ports=array();

		$tunnel=new Tunnel();
		$tunnel->setAttributes($params);
		$tunnel->setStarted(false);
		if ($tunnel->getIp()=="") throw new \Exception("Debes especificar un equipo de destino");

		$usertunnel=new UserTunnels();
		$usertunnel->setUser($user);
		$usertunnel->setDescription($params["description"]);
		$usertunnel->setRunning(false);
	
		$usertunnel->setComputer($entityManager->getReference(Computer::class,$params["ip-row-id"]));
		$usertunnel->setService($entityManager->getReference(Service::class,$params["destport-row-id"]));

		$tunnel->addUser($usertunnel);
		$user->addTunnel($usertunnel);

		$listatunnels=$this->getDoctrine()->getRepository(Tunnel::class)->findAll();
		foreach($listatunnels as $t) {
			if ($tunnel->compareTo($t) == 0) {
				$users=$t->getUsers(); 
				foreach($users as $u) {
					if ($u->getUser()->getId()==$user->getId()) return null;
				}
				$t->addUser($usertunnel);
				return $t;
			}
			$p=$t->getSourceport();
			if ($p==$portnumber) $portnumber=0;
			$ports[]=$p;
		}
		if ($portnumber!=0) {
			$tunnel->setSourceport($portnumber);
			return $tunnel;
		}
		while (($portnumber == 0) && ($tries < 20)) {
			$portnumber=rand(64000,65534);
			$valid=true;
			foreach($ports as $p) {
				if ($p==$portnumber) {
					$valid=false; break;
				}
			}
			if ($valid) {
				$tunnel->setSourceport($portnumber);
				return $tunnel;
			}
			$tries++;
		}
		throw new \Exception("No se encuentra puerto libre",100);
	}
}
